                                      1 .include "asm.macros.s"
                                      1 .macro _signed_add_a regH regL ?lbl
                                      2         ; If A is negative, we need
                                      3         ; to substract $100 from HL
                                      4         ; (since A's "upper byte" is
                                      5         ; $FF00)
                                      6         bit 7, a                    ; set z if a signed bit is 0
                                      7         jr z, lbl                   ; if z is set jump to positive
                                      8         dec   regH                  ; if negative decrement upper byte
                                      9     lbl:
                                     10         ; Then do addition as usual
                                     11         ; (to handle the "lower byte")
                                     12         add   a, regL
                                     13         ld    regL, a
                                     14         adc   a, regH
                                     15         sub   regL
                                     16         ld    regH, a
                                     17 .endm
                                     18 
                                     19 .macro _signed_sub_a regH regL ?lbl
                                     20 
                                     21         ; If A is negative, we need
                                     22         ; to substract $100 from HL
                                     23         ; (since A's "upper byte" is
                                     24         ; $FF00)
                                     25         bit 7, a                    ; set z if a signed bit is 0
                                     26         jr z, lbl                   ; if z is set jump to positive
                                     27         dec   regH                  ; if negative decrement upper byte
                                     28     lbl:
                                     29         ; Then do addition as usual
                                     30         ; (to handle the "lower byte")
                                     31         add   a, regL
                                     32         ld    regL, a
                                     33         adc   a, regH
                                     34         sub   regL
                                     35         ld    regH, a
                                     36 
                                     37 
                                     38         ; We negate A (since HL - A
                                     39         ; is the same as HL + -A)
                                     40         ; neg
                                     41         ; _signed_sub_a regH, regL
                                     42     ;     ; Now add the "upper byte"
                                     43     ;     ; The flags are already set by NEG
                                     44     ;     ; The JP PE is because -$80 becomes
                                     45     ;     ; +$80 so we need to handle it too
                                     46     ;     jp    p, lbl
                                     47     ;     jp    pe, lbl
                                     48     ;     dec   h
                                     49     ; lbl:
                                     50         
                                     51     ;     ; Then add the low byte
                                     52     ;     add   a, l
                                     53     ;     ld    l, a
                                     54     ;     adc   a, h
                                     55     ;     sub   l
                                     56     ;     ld    h, a
                                     57 .endm
                                     58 
                                     59 .macro _add_a regH regL
                                     60         ; Then do addition as usual
                                     61         ; (to handle the "lower byte")
                                     62         add   a, regL
                                     63         ld    regL, a
                                     64         adc   a, regH
                                     65         sub   regL
                                     66         ld    regH, a
                                     67 .endm
                                     68 
                                     69 .macro _sub16 h1 l1 h2 l2
                                     70     ld a, l1
                                     71     sub a, l2
                                     72     ld l1, A
                                     73 
                                     74     ld a, h1
                                     75     sbc h2
                                     76     ld h1, A
                                     77 .endm
                                     78 
                                     79 .macro _if_lt_16 h2 l2 h1 l1 tmp lbl
                                     80         ld a, l1
                                     81         sub a, l2
                                     82         ld	tmp, a
                                     83         ld	a, h1
                                     84         sbc	a, h2
                                     85         ld	tmp, a
                                     86         bit	7, tmp
                                     87         jr	Z, lbl    
                                     88 .endm
                                     89 
                                     90 .macro _if_lt_u16 h1 l1 h2 l2 lbl
                                     91         ld	a, l1
                                     92         sub	a, l2
                                     93         ld	a, h1
                                     94         sbc	a, h2
                                     95         jr	c, lbl
                                     96 .endm
                                     97 
                                     98 .macro _if_gt_16 h1 l1 h2 l2 tmp lbl
                                     99         ld a, l1
                                    100         sub a, l2
                                    101         ld	tmp, a
                                    102         ld	a, h1
                                    103         sbc	a, h2
                                    104         ld	tmp, a
                                    105         bit	7, tmp
                                    106         jr	Z, lbl    
                                    107 .endm
                                    108 
                                    109 ;    0000 21r00r00             62 	ld	hl, #_camera_tmp_a
                                    110 ;    0003 7E                   63 	ld	a, (hl)
                                    111 ;    0004 21r02r00             64 	ld	hl, #_camera_tmp_b
                                    112 ;    0007 96                   65 	sub	a, (hl)
                                    113 ;    0008 4F                   66 	ld	c, a
                                    114 ;    0009 21r01r00             67 	ld	hl, #_camera_tmp_a + 1
                                    115 ;    000C 7E                   68 	ld	a, (hl)
                                    116 ;    000D 21r03r00             69 	ld	hl, #_camera_tmp_b + 1
                                    117 ;    0010 9E                   70 	sbc	a, (hl)
                                    118 ;    0011 47                   71 	ld	b, a
                                    119 ;    0012 CB 78                72 	bit	7, b
                                    120 ;    0014 28 08                73 	jr	Z,00102$
                                      2 
      000000                          3 _UpdateCamera::
                                      4 
      000000 21 00 00                 5         ld hl, #_camera_settings
      000003 7E                       6         ld a, (hl)
      000004 CB 67                    7         bit 4, a
      000006 20 01                    8         jr nz, handle_x
      000008 C9                       9         ret
                                     10 
      000009                         11     handle_x:
                                     12 
                                     13     ; Load player x into de
      000009 21 00 00                14         ld hl, #_actors
      00000C 5E                      15         ld e, (hl)
      00000D 23                      16         inc hl
      00000E 56                      17         ld d, (hl)
                                     18         
                                     19     ; Add camera offset x to de and store on stack
      00000F 21 00 00                20         ld hl, #_camera_offset
      000012 46                      21         ld b, (hl)
      000013 3E 08                   22         ld a, #8
      000015 90                      23         sub a, b
      000016                         24         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      000016 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      000018 28 01                    6         jr z, 10000$                   ; if z is set jump to positive
      00001A 15                       7         dec   d                  ; if negative decrement upper byte
      00001B                          8     10000$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      00001B 83                      11         add   a, e
      00001C 5F                      12         ld    e, a
      00001D 8A                      13         adc   a, d
      00001E 93                      14         sub   e
      00001F 57                      15         ld    d, a
                                     25 
      000020                         26     check_x_no_deadzone:
                                     27 
                                     28     ; Load deadzone into a
      000020 21 00 00                29         ld hl, #_camera_deadzone
      000023 7E                      30         ld a, (hl)
                                     31 
                                     32     ; If no deadzone x set to new pos
      000024 FE 00                   33         cp a, #0
      000026 C2 32 00                34         jp nz, check_x_gt
                                     35         
                                     36     ; Set camera x to new position
      000029 21 00 00                37         ld hl, #_camera_pos
      00002C 73                      38         ld (hl), e
      00002D 23                      39         inc hl
      00002E 72                      40         ld (hl), d
      00002F C3 A4 00                41         jp handle_y
                                     42 
      000032                         43     check_x_gt:
                                     44 
                                     45     ; Keep new pos x on stack
      000032 D5                      46         push de
                                     47 
                                     48     ; Load camera pos x into de
      000033 21 00 00                49         ld hl, #_camera_pos
      000036 5E                      50         ld e, (hl)
      000037 23                      51         inc hl
      000038 56                      52         ld d, (hl)
                                     53 
                                     54     ; Add deadzone to camera pos x
      000039                         55         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      000039 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      00003B 28 01                    6         jr z, 10001$                   ; if z is set jump to positive
      00003D 15                       7         dec   d                  ; if negative decrement upper byte
      00003E                          8     10001$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      00003E 83                      11         add   a, e
      00003F 5F                      12         ld    e, a
      000040 8A                      13         adc   a, d
      000041 93                      14         sub   e
      000042 57                      15         ld    d, a
                                     56 
                                     57     ; Load new pos into hl
      000043 E1                      58         pop hl
                                     59         
      000044                         60         _if_lt_16 h, l, d, e, b, check_x_lt
      000044 7B                       1         ld a, e
      000045 95                       2         sub a, l
      000046 47                       3         ld	b, a
      000047 7A                       4         ld	a, d
      000048 9C                       5         sbc	a, h
      000049 47                       6         ld	b, a
      00004A CB 78                    7         bit	7, b
      00004C 28 1C                    8         jr	Z, check_x_lt    
                                     61 
      00004E                         62     handle_x_gt:
                                     63 
                                     64     ; Load new camera pos into de
      00004E 54                      65         ld d, h
      00004F 5D                      66         ld e, l
                                     67 
                                     68     ; Sub camera deadzone x from de
      000050 21 00 00                69         ld hl, #_camera_deadzone
      000053 46                      70         ld b, (hl)
      000054 3E 00                   71         ld a, #0
      000056 90                      72         sub a, b
      000057                         73         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      000057 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      000059 28 01                    6         jr z, 10002$                   ; if z is set jump to positive
      00005B 15                       7         dec   d                  ; if negative decrement upper byte
      00005C                          8     10002$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      00005C 83                      11         add   a, e
      00005D 5F                      12         ld    e, a
      00005E 8A                      13         adc   a, d
      00005F 93                      14         sub   e
      000060 57                      15         ld    d, a
                                     74 
                                     75     ; Set camera x to new position
      000061 21 00 00                76         ld hl, #_camera_pos
      000064 73                      77         ld (hl), e
      000065 23                      78         inc hl
      000066 72                      79         ld (hl), d
      000067 C3 A4 00                80         jp handle_y
                                     81 
      00006A                         82     check_x_lt:
                                     83 
                                     84     ; Save new pos to stack
      00006A E5                      85         push hl
                                     86 
                                     87     ; Load camera pos x into de
      00006B 21 00 00                88         ld hl, #_camera_pos
      00006E 5E                      89         ld e, (hl)
      00006F 23                      90         inc hl
      000070 56                      91         ld d, (hl)
                                     92 
                                     93     ; Add camera deadzone x to de
      000071 21 00 00                94         ld hl, #_camera_deadzone
      000074 46                      95         ld b, (hl)
      000075 3E 00                   96         ld a, #0
      000077 90                      97         sub a, b
      000078                         98         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      000078 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      00007A 28 01                    6         jr z, 10003$                   ; if z is set jump to positive
      00007C 15                       7         dec   d                  ; if negative decrement upper byte
      00007D                          8     10003$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      00007D 83                      11         add   a, e
      00007E 5F                      12         ld    e, a
      00007F 8A                      13         adc   a, d
      000080 93                      14         sub   e
      000081 57                      15         ld    d, a
                                     99 
                                    100     ; Load new pos into hl
      000082 E1                     101         pop hl
                                    102         
      000083                        103         _if_gt_16 h, l, d, e, b, handle_y
      000083 7D                       1         ld a, l
      000084 93                       2         sub a, e
      000085 47                       3         ld	b, a
      000086 7C                       4         ld	a, h
      000087 9A                       5         sbc	a, d
      000088 47                       6         ld	b, a
      000089 CB 78                    7         bit	7, b
      00008B 28 17                    8         jr	Z, handle_y    
                                    104 
      00008D                        105     handle_x_lt:
                                    106 
                                    107     ; Load new camera pos into de
      00008D 54                     108         ld d, h
      00008E 5D                     109         ld e, l
                                    110 
                                    111     ; Add camera deadzone x to de
      00008F 21 00 00               112         ld hl, #_camera_deadzone
      000092 46                     113         ld b, (hl)
      000093 78                     114         ld a, b
      000094                        115         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      000094 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      000096 28 01                    6         jr z, 10004$                   ; if z is set jump to positive
      000098 15                       7         dec   d                  ; if negative decrement upper byte
      000099                          8     10004$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      000099 83                      11         add   a, e
      00009A 5F                      12         ld    e, a
      00009B 8A                      13         adc   a, d
      00009C 93                      14         sub   e
      00009D 57                      15         ld    d, a
                                    116 
                                    117     ; Set camera x to new position
      00009E 21 00 00               118         ld hl, #_camera_pos
      0000A1 73                     119         ld (hl), e
      0000A2 23                     120         inc hl
      0000A3 72                     121         ld (hl), d
                                    122         
      0000A4                        123     handle_y:
                                    124 
                                    125     ; Load player y into de
      0000A4 21 02 00               126         ld hl, #(_actors + 2)
      0000A7 5E                     127         ld e, (hl)
      0000A8 23                     128         inc hl
      0000A9 56                     129         ld d, (hl)
                                    130         
                                    131     ; Add camera offset y to de and store on stack
      0000AA 21 01 00               132         ld hl, #(_camera_offset + 1)
      0000AD 46                     133         ld b, (hl)
      0000AE 3E 08                  134         ld a, #8
      0000B0 90                     135         sub a, b
      0000B1                        136         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      0000B1 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      0000B3 28 01                    6         jr z, 10005$                   ; if z is set jump to positive
      0000B5 15                       7         dec   d                  ; if negative decrement upper byte
      0000B6                          8     10005$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      0000B6 83                      11         add   a, e
      0000B7 5F                      12         ld    e, a
      0000B8 8A                      13         adc   a, d
      0000B9 93                      14         sub   e
      0000BA 57                      15         ld    d, a
                                    137 
      0000BB                        138     check_y_no_deadzone:
                                    139 
                                    140     ; Load deadzone into a
      0000BB 21 01 00               141         ld hl, #(_camera_deadzone + 1)
      0000BE 7E                     142         ld a, (hl)
                                    143 
                                    144     ; If no deadzone x set to new pos
      0000BF FE 00                  145         cp a, #0
      0000C1 C2 CB 00               146         jp nz, check_y_gt
                                    147         
                                    148     ; Set camera y to new position
      0000C4 21 02 00               149         ld hl, #(_camera_pos + 2)
      0000C7 73                     150         ld (hl), e
      0000C8 23                     151         inc hl
      0000C9 72                     152         ld (hl), d
      0000CA C9                     153         ret
                                    154 
      0000CB                        155     check_y_gt:
                                    156 
                                    157     ; Keep new pos y on stack
      0000CB D5                     158         push de
                                    159 
                                    160     ; Load camera pos y into de
      0000CC 21 02 00               161         ld hl, #(_camera_pos + 2)
      0000CF 5E                     162         ld e, (hl)
      0000D0 23                     163         inc hl
      0000D1 56                     164         ld d, (hl)
                                    165 
                                    166     ; Add deadzone to camera pos y
      0000D2                        167         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      0000D2 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      0000D4 28 01                    6         jr z, 10006$                   ; if z is set jump to positive
      0000D6 15                       7         dec   d                  ; if negative decrement upper byte
      0000D7                          8     10006$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      0000D7 83                      11         add   a, e
      0000D8 5F                      12         ld    e, a
      0000D9 8A                      13         adc   a, d
      0000DA 93                      14         sub   e
      0000DB 57                      15         ld    d, a
                                    168 
                                    169     ; Load new pos into hl
      0000DC E1                     170         pop hl
                                    171 
      0000DD                        172         _if_lt_16 h, l, d, e, b, check_y_lt
      0000DD 7B                       1         ld a, e
      0000DE 95                       2         sub a, l
      0000DF 47                       3         ld	b, a
      0000E0 7A                       4         ld	a, d
      0000E1 9C                       5         sbc	a, h
      0000E2 47                       6         ld	b, a
      0000E3 CB 78                    7         bit	7, b
      0000E5 28 1A                    8         jr	Z, check_y_lt    
                                    173 
      0000E7                        174     handle_y_gt:
                                    175 
                                    176     ; Load new camera pos into de
      0000E7 54                     177         ld d, h
      0000E8 5D                     178         ld e, l
                                    179 
                                    180     ; Sub camera deadzone y from de
      0000E9 21 01 00               181         ld hl, #(_camera_deadzone + 1)
      0000EC 46                     182         ld b, (hl)
      0000ED 3E 00                  183         ld a, #0
      0000EF 90                     184         sub a, b
      0000F0                        185         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      0000F0 CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      0000F2 28 01                    6         jr z, 10007$                   ; if z is set jump to positive
      0000F4 15                       7         dec   d                  ; if negative decrement upper byte
      0000F5                          8     10007$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      0000F5 83                      11         add   a, e
      0000F6 5F                      12         ld    e, a
      0000F7 8A                      13         adc   a, d
      0000F8 93                      14         sub   e
      0000F9 57                      15         ld    d, a
                                    186 
                                    187     ; Set camera y to new position
      0000FA 21 02 00               188         ld hl, #(_camera_pos + 2)
      0000FD 73                     189         ld (hl), e
      0000FE 23                     190         inc hl
      0000FF 72                     191         ld (hl), d
      000100 C9                     192         ret
                                    193 
      000101                        194     check_y_lt:
                                    195 
                                    196     ; Save new pos to stack
      000101 E5                     197         push hl
                                    198 
                                    199     ; Load camera pos y into de
      000102 21 02 00               200         ld hl, #(_camera_pos + 2)
      000105 5E                     201         ld e, (hl)
      000106 23                     202         inc hl
      000107 56                     203         ld d, (hl)
                                    204 
                                    205     ; Add camera deadzone y to de
      000108 21 01 00               206         ld hl, #(_camera_deadzone + 1)
      00010B 46                     207         ld b, (hl)
      00010C 3E 00                  208         ld a, #0
      00010E 90                     209         sub a, b
      00010F                        210         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      00010F CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      000111 28 01                    6         jr z, 10008$                   ; if z is set jump to positive
      000113 15                       7         dec   d                  ; if negative decrement upper byte
      000114                          8     10008$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      000114 83                      11         add   a, e
      000115 5F                      12         ld    e, a
      000116 8A                      13         adc   a, d
      000117 93                      14         sub   e
      000118 57                      15         ld    d, a
                                    211 
                                    212     ; Load new pos into hl
      000119 E1                     213         pop hl
                                    214         
      00011A                        215         _if_lt_16 h, l, d, e, b, handle_y_lt
      00011A 7B                       1         ld a, e
      00011B 95                       2         sub a, l
      00011C 47                       3         ld	b, a
      00011D 7A                       4         ld	a, d
      00011E 9C                       5         sbc	a, h
      00011F 47                       6         ld	b, a
      000120 CB 78                    7         bit	7, b
      000122 28 01                    8         jr	Z, handle_y_lt    
      000124 C9                     216         ret
                                    217 
      000125                        218     handle_y_lt:
                                    219 
                                    220     ; Load new camera pos into de
      000125 54                     221         ld d, h
      000126 5D                     222         ld e, l
                                    223 
                                    224     ; Add camera deadzone y to de
      000127 21 01 00               225         ld hl, #(_camera_deadzone + 1)
      00012A 46                     226         ld b, (hl)
      00012B 78                     227         ld a, b
      00012C                        228         _signed_add_a d, e
                                      1         ; If A is negative, we need
                                      2         ; to substract $100 from HL
                                      3         ; (since A's "upper byte" is
                                      4         ; $FF00)
      00012C CB 7F                    5         bit 7, a                    ; set z if a signed bit is 0
      00012E 28 01                    6         jr z, 10009$                   ; if z is set jump to positive
      000130 15                       7         dec   d                  ; if negative decrement upper byte
      000131                          8     10009$:
                                      9         ; Then do addition as usual
                                     10         ; (to handle the "lower byte")
      000131 83                      11         add   a, e
      000132 5F                      12         ld    e, a
      000133 8A                      13         adc   a, d
      000134 93                      14         sub   e
      000135 57                      15         ld    d, a
                                    229 
                                    230     ; Set camera y to new position
      000136 21 02 00               231         ld hl, #(_camera_pos + 2)
      000139 73                     232         ld (hl), e
      00013A 23                     233         inc hl
      00013B 72                     234         ld (hl), d
                                    235 
      00013C C9                     236         ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (GameBoy Z80-like CPU), page 1.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  00271A L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000000 L   |   0 _UpdateC   000000 GR  |     _actors    ****** GX
    _camera_   ****** GX  |     _camera_   ****** GX  |     _camera_   ****** GX
    _camera_   ****** GX  |   0 check_x_   000032 R   |   0 check_x_   00006A R
  0 check_x_   000020 R   |   0 check_y_   0000CB R   |   0 check_y_   000101 R
  0 check_y_   0000BB R   |   0 handle_x   000009 R   |   0 handle_x   00004E R
  0 handle_x   00008D R   |   0 handle_y   0000A4 R   |   0 handle_y   0000E7 R
  0 handle_y   000125 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (GameBoy Z80-like CPU), page 2.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size    13D   flags    0

